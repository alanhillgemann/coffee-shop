{
	"info": {
		"_postman_id": "89ddb1cb-e709-4d42-b8a9-05844dc6f330",
		"name": "coffee-shop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Success GET /drinks (barista)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_1_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_1_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_1_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_1_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{barista}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{barista}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success GET /drinks (manager)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_1_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_1_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_1_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_1_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (authorization missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Authorization header is expected.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (Bearer missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Authorization header must start with \\\"Bearer\\\".\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearerr eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImRpUExPdXVnN0YwczYzVXlJZ2JjSiJ9.eyJpc3MiOiJodHRwczovL2FsYW5oaWxsZ2VtYW5uLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MDdjZGYzYTljNDU2ODAwNjgyNjY4OWEiLCJhdWQiOiJjb2ZmZWUtc2hvcCIsImlhdCI6MTYxODc5OTQ4OCwiZXhwIjoxNjE4ODg1ODg4LCJhenAiOiJBTlRMdlFRY2Y2ZEFUbll2ZFNyOVpZZERPUU9Yb1ZKZSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZ2V0OmRyaW5rcyIsImdldDpkcmlua3MtZGV0YWlsIl19.NE8Ne4wj4We_ZXUj6wwlFOV4JEhdhOlME6hvW5dQmqJF2aEf_WYhCclrJdfyq1fxjROU694XpcsgRHdVjUV94tHoECkiGRLxA4l29DPuZDxSWldpJgWbngYuTcPTw5ve_Pzvb6piQOUovA_rQJxuiEyE5wfpNtx3HkztCjoFZtfIUK7XmVAmC8maQB8a2X8ULVRWa6TGIDQCjfC16EY-c94sP3bXeX2WBgfy5eGHGRhMzEEEdIB1iJH4mdf4OP43JiWFpvuPddfjR0qBN-Ndrsr2yJ9sPLkTcQJTt5M1pAM0TDdJeQyYZLh966phXt5rgqUKDf1MBFVJHvBTjHSdoQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (Token missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Token not found.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (authorization too many parts)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Authorization header must be bearer token.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_too_many_parts}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (permissions missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Permissions not included in JWT.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{permissions_missing}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer Token 3rd_part"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (kid missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Authorization malformed.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{kid_missing}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (header invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Unable to decode token headers.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{header_invalid}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer Token 3rd_part"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (expired)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"\tpm.response.to.have.status(401);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Token expired.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{expired}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer Token 3rd_part"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (signature invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Unable to parse authentication token.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{signature_invalid}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer Token 3rd_part"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure GET /drinks (kid invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"\tpm.response.to.have.status(400);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Unable to find the appropriate key.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{kid_invalid}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success GET /drinks-detail (barista)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_1_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_1_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].name).to.eql(pm.variables.get(\"drink_1_recipe_1_name\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_1_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_1_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{barista}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks-detail",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks-detail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success GET /drinks-detail (manager)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_1_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_1_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].name).to.eql(pm.variables.get(\"drink_1_recipe_1_name\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_1_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_1_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks-detail",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks-detail"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success POST /drinks (manager)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_2_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_2_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].name).to.eql(pm.variables.get(\"drink_2_recipe_1_name\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_2_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].recipe[1].color).to.eql(pm.variables.get(\"drink_2_recipe_2_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[1].name).to.eql(pm.variables.get(\"drink_2_recipe_2_name\"));",
							"    pm.expect(responseJson.drinks[0].recipe[1].parts).to.eql(parseInt(pm.variables.get(\"drink_2_recipe_2_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_2_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_2_title}}\",\n    \"recipe\": [\n        {\n            \"name\": \"{{drink_2_recipe_1_name}}\",\n            \"color\": \"{{drink_2_recipe_1_color}}\",\n            \"parts\": {{drink_2_recipe_1_parts}}\n        },\n        {\n            \"name\": \"{{drink_2_recipe_2_name}}\",\n            \"color\": \"{{drink_2_recipe_2_color}}\",\n            \"parts\": {{drink_2_recipe_2_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure POST /drinks (barista - permission missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Permission not found.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{barista}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_2_title}}\",\n    \"recipe\": [\n        {\n            \"name\": \"{{drink_2_recipe_1_name}}\",\n            \"color\": \"{{drink_2_recipe_1_color}}\",\n            \"parts\": {{drink_2_recipe_1_parts}}\n        },\n        {\n            \"name\": \"{{drink_2_recipe_2_name}}\",\n            \"color\": \"{{drink_2_recipe_2_color}}\",\n            \"parts\": {{drink_2_recipe_2_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure POST /drinks (title duplicate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(422);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Unprocessable Entity\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_2_title}}\",\n    \"recipe\": [\n        {\n            \"name\": \"{{drink_2_recipe_1_name}}\",\n            \"color\": \"{{drink_2_recipe_1_color}}\",\n            \"parts\": {{drink_2_recipe_1_parts}}\n        },\n        {\n            \"name\": \"{{drink_2_recipe_2_name}}\",\n            \"color\": \"{{drink_2_recipe_2_color}}\",\n            \"parts\": {{drink_2_recipe_2_parts}}\n        }\n    ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure POST /drinks (body invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"\tpm.response.to.have.status(422);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Unprocessable Entity\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success PATCH /drinks/:drink_id (manager)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_3_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_3_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].name).to.eql(pm.variables.get(\"drink_3_recipe_1_name\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_3_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_3_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_3_title}}\",\n    \"recipe\": [\n        {\n            \"color\": \"{{drink_3_recipe_1_color}}\",\n            \"name\": \"{{drink_3_recipe_1_name}}\",\n            \"parts\": {{drink_3_recipe_1_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success PATCH /drinks/:drink_id (title unchanged)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})",
							"pm.test(\"Drink is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.drinks).to.have.lengthOf(1);",
							"    pm.expect(responseJson.drinks[0].id).to.eql(parseInt(pm.variables.get(\"drink_3_id\")));",
							"    pm.expect(responseJson.drinks[0].recipe[0].color).to.eql(pm.variables.get(\"drink_3_recipe_1_color\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].name).to.eql(pm.variables.get(\"drink_3_recipe_1_name\"));",
							"    pm.expect(responseJson.drinks[0].recipe[0].parts).to.eql(parseInt(pm.variables.get(\"drink_3_recipe_1_parts\")));",
							"    pm.expect(responseJson.drinks[0].title).to.eql(pm.variables.get(\"drink_3_title\"));",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_3_title}}\",\n    \"recipe\": [\n        {\n            \"color\": \"{{drink_3_recipe_1_color}}\",\n            \"name\": \"{{drink_3_recipe_1_name}}\",\n            \"parts\": {{drink_3_recipe_1_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure PATCH /drinks/:drink_id (barista - permission missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Permission not found.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{barista}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_3_title}}\",\n    \"recipe\": [\n        {\n            \"color\": \"{{drink_3_recipe_1_color}}\",\n            \"name\": \"{{drink_3_recipe_1_name}}\",\n            \"parts\": {{drink_3_recipe_1_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure PATCH /drinks/:drink_id (drink_id not exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"\tpm.response.to.have.status(404);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Not Found\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_2_title}}\",\n    \"recipe\": [\n        {\n            \"color\": \"{{drink_2_recipe_1_color}}\",\n            \"name\": \"{{drink_2_recipe_1_name}}\",\n            \"parts\": {{drink_2_recipe_1_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/999",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure PATCH /drinks/:drink_id (title duplicate)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"\tpm.response.to.have.status(422);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Unprocessable Entity\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{drink_1_title}}\",\n    \"recipe\": [\n        {\n            \"color\": \"{{drink_1_recipe_1_color}}\",\n            \"name\": \"{{drink_1_recipe_1_name}}\",\n            \"parts\": {{drink_1_recipe_1_parts}}\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success DELETE /drinks/:drink_id (manager)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"\tpm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure DELETE /drinks/:drink_id (barista - permission missing)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"\tpm.response.to.have.status(403);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Permission not found.\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{barista}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Failure DELETE /drinks/:drink_id (drink_id not exist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"\tpm.response.to.have.status(404);",
							"})",
							"pm.test(\"Error message is valid\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.message).to.eql(\"Not Found\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{manager}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/drinks/999",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"drinks",
						"999"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "barista",
			"value": ""
		},
		{
			"key": "manager",
			"value": ""
		},
		{
			"key": "permissions_missing",
			"value": ""
		},
		{
			"key": "auth_too_many_parts",
			"value": ""
		},
		{
			"key": "kid_missing",
			"value": ""
		},
		{
			"key": "header_invalid",
			"value": ""
		},
		{
			"key": "expired",
			"value": ""
		},
		{
			"key": "signature_invalid",
			"value": ""
		},
		{
			"key": "kid_invalid",
			"value": ""
		},
		{
			"key": "drink_1_id",
			"value": ""
		},
		{
			"key": "drink_1_title",
			"value": ""
		},
		{
			"key": "drink_1_recipe_1_name",
			"value": ""
		},
		{
			"key": "drink_1_recipe_1_color",
			"value": ""
		},
		{
			"key": "drink_1_recipe_1_parts",
			"value": ""
		},
		{
			"key": "drink_2_id",
			"value": ""
		},
		{
			"key": "drink_2_title",
			"value": ""
		},
		{
			"key": "drink_2_recipe_1_name",
			"value": ""
		},
		{
			"key": "drink_2_recipe_1_color",
			"value": ""
		},
		{
			"key": "drink_2_recipe_1_parts",
			"value": ""
		},
		{
			"key": "drink_2_recipe_2_name",
			"value": ""
		},
		{
			"key": "drink_2_recipe_2_color",
			"value": ""
		},
		{
			"key": "drink_2_recipe_2_parts",
			"value": ""
		},
		{
			"key": "drink_3_id",
			"value": ""
		},
		{
			"key": "drink_3_title",
			"value": ""
		},
		{
			"key": "drink_3_recipe_1_name",
			"value": ""
		},
		{
			"key": "drink_3_recipe_1_color",
			"value": ""
		},
		{
			"key": "drink_3_recipe_1_parts",
			"value": ""
		}
	]
}